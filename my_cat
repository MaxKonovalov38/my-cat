#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

GetOptions (
    'help' =>     \my $help,
    'version' =>  \my $version,
    'count=i' =>  \my $count,
    'number' =>   \my $number,
    'number-nonblank|b' => \my $num_nb,
    ) or pod2usage(1);

my $value_arg = 0;

# Функция выводит n-количество строк с начала файла
sub print_count_line_file_up {
    my $number = shift;
    my $file = shift;
    open(my $fh, '<', $file) or die $!;
    for (my $i = 0; $i<$number; $i++) {
        while ( my $line = <$fh> ) {
            chomp($line);
            print($line . "\n");
            last;
        }
    }
    close($fh);
}

# Фукция выводит построчно содержимое файла
sub full_print_file {
    my $file = shift;
    open(my $fh, '<', $file) or die $!;
    while ( my $line = <$fh> ) {
        chomp($line);
        print($line . "\n");
    }
    close($fh);
}

# Функция нумерации всех строк по мере их записи на стандартный вывод
sub out_number_line {
    my $file = shift;
    my $n = 0;
    open(my $fh, '<', $file) or die $!;
    while ( my $line = <$fh> ) {
        chomp($line);
        $n += 1;
        print($n, "  ", $line . "\n");
    }
    close($fh);
}

# Функция нумерации непустых строк при выводе
sub out_number_ne_line {
    my $file = shift;
    my $n = 0;
    open(my $fh, '<', $file) or die $!;
    while ( my $line = <$fh> ) {
        chomp($line);
        # Проверка, что строка состоит только из пробельных символов (включая перевод строки, пробелы, табуляцию)
        if (!(defined $line && $line =~ /^\s*$/)) {
            $n += 1;
            print($n, "  ", $line . "\n");
        }
    }
    close($fh);
}

if ( $help ) {
    # Вывод полной справочной информации
    pod2usage(-verbose => 2);
    exit 0;
} elsif ($version) {
    # Вывод версии программы
    print "Version program my_cat: 1.0.0\n";
    exit 0;
} elsif ( $count ) {
    # Проверка на ввод имя файла
    if ( @ARGV >= 1 ) {
        $value_arg = shift;
        print_count_line_file_up($count, $value_arg);
    }
    exit 0;
} elsif ( $number ) {
    # Проверка на ввод имя файла
    if ( @ARGV >= 1 ) {
        $value_arg = shift;
        out_number_line($value_arg);
    }
    exit;
} elsif ( $num_nb ) {
    # Проверка на ввод имя файла
    if ( @ARGV >= 1 ) {
        $value_arg = shift;
        out_number_ne_line($value_arg);
    }
} elsif ( @ARGV >= 1 ) {
    $value_arg = shift;
    full_print_file($value_arg);
} else {
    print "[ERROR] -- Argument not found!\n";
    exit 0;
}


__END__

=head1 NAME

my_cat - a utility for displaying the contents of one or more text files on the screen.

=head1 SYNOPSIS

my_cat [options] (file)

    Options:
        -h | --help             Output of reference information on my_cat
        -v | --version          Program version
        -c | --count            Outputs n-the number of lines from the beginning of the file
        -n | --number           Numbering of all lines as they are written to the standard output
        -b | --number-nonblank  To number non-empty lines in the output

=head1 VERSION

1.0.0

=cut